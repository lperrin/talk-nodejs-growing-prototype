{
  "name": "paperwork",
  "description": "Lightweight JSON validation for REST APIs.",
  "keywords": [
    "rest",
    "validation",
    "json",
    "api",
    "express"
  ],
  "version": "1.0.1",
  "author": {
    "name": "Laurent Perrin",
    "email": "laurent.perrin@gmail.com"
  },
  "main": "./paperwork.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/lperrin/paperwork"
  },
  "licenses": [
    {
      "type": "BSD"
    }
  ],
  "dependencies": {
    "underscore": "*"
  },
  "devDependencies": {
    "mocha": "*",
    "should": "*"
  },
  "bugs": {
    "url": "https://github.com/lperrin/paperwork/issues"
  },
  "readme": "Paperwork\n=========\n\nLightweight JSON validation for node.js REST APIs.\n\nWhy ?\n-----\n\nIf you build a REST API with node.js, you'll end up validating JSON sooner or later. It's not exactly difficult, but life would be easier if:\n\n- You knew precisely what the structure of data your API accepts.\n- It was easy for your fellow developers to document the requirements of the API.\n- It was easy for people consuming the API to understand why their request was rejected.\n- You didn't have to write boilerplate code.\n\nHow it works\n------------\n\nSimple ! Just write a JSON template:\n\n```javascript\nvar blogPostTemplate = {\n  article_id: Number,\n  title: String,\n  body: String,\n  publish_immediately: Boolean,\n  tags: [String]\n};\n```\n\nYou can then validate JSON like that. It will return an array of missing or incorrect fields. The array is of course empty is everything is OK:\n\n```javascript\nvar invalidFields = paperwork.invalid(incomingPost, blogPostTemplate);\n\nif(!invalidFields) {\n  // JSON was validated\n} else {\n  // invalidFields is the list of incorrect fields\n}\n```\n\nExpress integration\n-------------------\n\nIf you're using [Express](http://expressjs.com), things are even simpler:\n\n```javascript\napp.post('/post', paperwork(blogPostTemplate), function (req, res) {\n  // req.body is now validated\n});\n```\n\nInvalid requests will receive an HTTP 400 response and will be silently rejected.\n\nAdvanced Usage\n--------------\n\nUser profile with minimal email validation and optional fields\n\n```javascript\nvar userProfileTemplate = {\n  email: /[^@]+@[^@]+/,                    // validates only strings matching this regex\n  name: String,\n  age: Number,\n  admin: Boolean,\n  phone: paperwork.optional(String),       // makes the field optional\n  country: paperwork.optional(/[a-z]{2}/)\n};\n```\n\nValidating the content of an array\n\n```javascript\nvar betterBlogPostTemplate = {\n  title: String,\n  body: String,\n  attachments: paperwork.optional([{      // validates an array of attachments\n    content_type: String,\n    data: String,\n    size: Number\n  }])\n};\n```\n\nCustom validation, multiple conditions\n\n```javascript\nvar betterUserProfile = {\n  email: /[^@]+@[^@]+/,\n  name: String,\n  age: function (age) {\n    return age > 0;\n  }\n};\n\nvar evenBetterUserProfile = {\n  email: /[^@]+@[^@]+/,\n  name: String,\n  age: paperwork.all(Number, function (age) {\n    return age > 0;\n  })\n};\n```",
  "readmeFilename": "README.md",
  "_id": "paperwork@1.0.1",
  "dist": {
    "shasum": "8b798f72741531fcc9503f8619f04495a0f35d7f"
  },
  "_from": "paperwork@",
  "_resolved": "https://registry.npmjs.org/paperwork/-/paperwork-1.0.1.tgz"
}
